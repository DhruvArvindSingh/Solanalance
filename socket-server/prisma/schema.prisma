generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Profile {
    id        String   @id @db.Uuid
    userId    Int      @unique @default(autoincrement()) @map("user_id")
    fullName  String   @map("full_name")
    email     String
    avatarUrl String?  @map("avatar_url")
    bio       String?
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

    messages      Message[]
    notifications Notification[]

    @@map("profiles")
}

model Project {
    id           String   @id @db.Uuid
    jobId        String   @map("job_id") @db.Uuid
    recruiterId  String   @map("recruiter_id") @db.Uuid
    freelancerId String   @map("freelancer_id") @db.Uuid
    status       String   @default("active")
    createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

    messages Message[]

    @@map("projects")
}

model Message {
    id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
    projectId   String    @map("project_id") @db.Uuid
    senderId    String    @map("sender_id") @db.Uuid
    content     String
    messageType String    @default("text") @map("message_type")
    fileUrl     String?   @map("file_url")
    fileName    String?   @map("file_name")
    fileSize    Int?      @map("file_size")
    isRead      Boolean   @default(false) @map("is_read")
    createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
    updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
    deletedAt   DateTime? @map("deleted_at") @db.Timestamptz(6)

    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    sender  Profile @relation(fields: [senderId], references: [id], onDelete: Cascade)

    @@index([projectId])
    @@index([senderId])
    @@index([createdAt(sort: Desc)])
    @@map("messages")
}

model DirectMessage {
    id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
    senderId    String   @map("sender_id") @db.Uuid
    recipientId String   @map("recipient_id") @db.Uuid
    content     String
    messageType String   @default("text") @map("message_type")
    fileUrl     String?  @map("file_url")
    fileName    String?  @map("file_name")
    fileSize    Int?     @map("file_size")
    isRead      Boolean  @default(false) @map("is_read")
    createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
    updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

    @@index([senderId])
    @@index([recipientId])
    @@index([createdAt(sort: Desc)])
    @@map("direct_messages")
}

model Notification {
    id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
    userId    String   @map("user_id") @db.Uuid
    title     String
    message   String
    type      String
    relatedId String?  @map("related_id") @db.Uuid
    isRead    Boolean  @default(false) @map("is_read")
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

    user Profile @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("notifications")
}
